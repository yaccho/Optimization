# -*- coding: utf-8 -*-
"""
Created on Tue Nov 19 20:29:16 2019

@author: yas05
"""

#Ant Colony Optimization


import numpy as np
from numpy import inf

#given values for the problems
"""
d = np.array([[0,10,12,11,14]
               ,[10,0,13,15,8]
               ,[12,13,0,9,14]
               ,[11,15,9,0,16]
               ,[14,8,14,16,0]]) #distance
"""

iteration = 100
#n_ants = 5
#n_cities = 5#initialization
n_ants = 10
n_cities = 10#initialization

#randomly making a distance matrix

d = np.random.randint(1,20,(n_cities,n_cities)) #distance
for i in range(n_cities):
    for j in range(n_cities):
        d[j,i] = d[i,j]
    d[i,i] = 0
print(d)

m = n_ants
n = n_cities
e = .5 #evapolation late
alpha = 1 #pheromone factor
beta = 2 #visibility factor

#calculating the visibility of the next city visibility(i,j) = 1/d(i,j)

visibility = 1/d
visibility[visibility == inf] = 0

#initializing pheromone present at the paths to the cities

pheromone = .1*np.ones((m,n))

#initializing the route of the ants with size route(n_ants, n_cities+1)
#adding 1 because we want ant to come back to the source city

route = np.ones((m,n+1))

"""
if m = 3,n = 4
pheromone = [p11 p12 p13 p14
             p21 p22 p23 p24
             p31 p32 p33 p34]
             
route     = [r11 r12 r13 r14 r15
             r21 r22 r23 r24 r25
             r31 r32 r33 r34 r35]
           

distance  = [d11 d12 d13 d14
             d21 d22 d23 d24
             d31 d32 d33 d34
             d41 d42 d43 d44]
             
visibility =[v11 v12 v13 v14
             v21 v22 v23 v24
             v31 v32 v33 v34
             v41 v42 v43 v44]
            
p_feature = np.power(pheromone[0,:],alpha) 
          =[p11^alpha p12^alpha p13^alpha p14^alpha]

v_feature = np.power(visibility[0,:],alpha) 
          =[v11^beta v12^beta v13^beta v14^beta]

combine_feature = np.multiply(p_feature,v_feature)
          =[p11^alpha+v11^beta p12^alpha+v12^beta p13^alpha+v13^beta p14^alpha+v14^beta]


np.nonzero

>>> x = np.array([[3, 0, 0], [0, 4, 0], [5, 6, 0]])
>>> x
array([[3, 0, 0],
       [0, 4, 0],
       [5, 6, 0]])
>>> np.nonzero(x)
(array([0, 1, 2, 2]), array([0, 1, 0, 1])) #first array indicates row, second array indicates column of the components which is not zero 


"""

for ite in range(iteration):
    route[:,0] = 1                         #initial starting and ending position of every ants '1' i,e city '1' 
    for i in range(m):                    #loop for the number of ants, ith ant
        temp_visibility = np.array(visibility) #creating a copy of visibility
        #calculation of probability 
        for j in range(n-1): #loop for the number of city (n cities - initial city), jth city
            #print(route)
            combine_feature = np.zeros(n)  #initializing combine_feature array to zero
            cum_prob = np.zeros(n)         #initializing cummulative probability array to zeros
            cur_loc = int(route[i,j]-1)    #current city of the ith ant
            temp_visibility[:,cur_loc] = 0 #making visibility of the current city as zero
            
            p_feature = np.power(pheromone[cur_loc,:],alpha)        #calculating pheromone feature
            v_feature = np.power(temp_visibility[cur_loc,:],beta) #calculating visibility feature
            
            p_feature = p_feature[:,np.newaxis]  #adding axis to make a size(5,1) 
            v_feature = v_feature[:,np.newaxis]  #adding axis to make a size(5,1)
            
            combine_feature = np.multiply(p_feature,v_feature) #calculating the combine feature
            
            total = np.sum(combine_feature) #sum of all the feature
            
            probs = combine_feature/total  #finding probability of element probs(i) = combine_feature(i)/total
            
            cum_prob = np.cumsum(probs) #calculating cummulative sum
            #print(cum_prob)
            r = np.random.random_sample() #random number in [0,1)
            #print(r)
            """
            Elite selection
            """
            #city = np.argmax(probs)+1
            """
            Random selection
            """
            city = np.nonzero(cum_prob>r)[0][0]+1 #finding the next city having probability higher than random value
            
            route[i,j+1] = city #adding city to route
            
        left = list(set([i for i in range(1,n+1)])-set(route[i,:-2]))[0] # finding the last untraversed city 
        
        route[i,-2] = left #adding untraversed city to route
    
    route_opt = np.array(route) #initializing the optimal route
    
    dist_cost = np.zeros((m,1)) #initializing total_distance_of_four with zero
    
    for i in range(m):
        cost = 0
        for j in range(n-1):
            cost = cost+d[int(route_opt[i,j])-1,int(route_opt[i,j+1])-1] #calculating total tour distance
            
        dist_cost[i] = cost #storing distance of tour for 'i'th ant at location 'i'
        
    dist_min_loc = np.argmin(dist_cost) #finding location of minimum of dist_cost
    dist_min_cost = dist_cost[dist_min_loc] #finding minimum of dist_cost
    
    best_route = route[dist_min_loc,:] #initializing the current traversed route as best route 
    pheromone = (1-e)*pheromone #evapolation
    
    for i in range(m):
        for j in range(n-1):
            dt = 1/dist_cost[i]
            pheromone[int(route_opt[i,j])-1,int(route_opt[i,j+1])-1] = pheromone[int(route_opt[i,j])-1,int(route_opt[i,j+1])-1]+dt
            #updating the pheromone with delta_distance
            #delta_distance will be more with min_dist i.e. adding more weight to that route pheromone

print('route of all the ants at the end :')
print(route_opt)
print()
print('best_path :',best_route)
print('cost of the best path',int(dist_min_cost[0])+d[int(best_route[-2])-1,0])
