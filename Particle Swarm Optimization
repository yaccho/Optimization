# -*- coding: utf-8 -*-
"""
Created on Sun Nov 24 17:26:53 2019

@author: yas05
"""
#Particle Swarm Optimization
#Search minimum for z = x^2 + y^2

import numpy as np
import random

#Objective function
def criterion(x,y):
    z = x*x + y*y
    return z

#Updating the position of particle
def update_pos(x,y,vx,vy):
    new_x = x + vx
    new_y = y + vy
    return new_x,new_y

#uodating the velocity of particle
    #p is personal best, g is global best
def update_vel(x,y,vx,vy,p,g,w = 0.5,ro_max = 0.14):
    #ro is randomly set 
    ro1 = random.uniform(0,ro_max)
    ro2 = random.uniform(0,ro_max)
    new_vx = w*vx + ro1*(p["x"]-x) + ro2*(g["x"]-x)
    new_vy = w*vy + ro1*(p["y"]-y) + ro2*(g["y"]-y)
    return new_vx,new_vy

def main():
    N = 100#Number of the particles
    x_min, x_max = -5,5
    y_min, y_max = -5,5
    
    #initialization of position, velocity, personal best, global best
    ps = [{"x":random.uniform(x_min,x_max),
           "y":random.uniform(y_min,y_max)} for i in range(N)]
    vs = [{"x":0.0,"y":0.0} for i in range(N)]
    personal_best_positions = list(ps)
    personal_best_scores = [criterion(p["x"],p["y"])for p in ps]
    best_particle= np.argmin(personal_best_scores)
    global_best_position = personal_best_positions[best_particle]
    
    T = 30 #limitation of the number of iteration
    for t in range(T):
        for n in range(N):
            x,y = ps[n]["x"],ps[n]["y"]
            vx,vy = vs[n]["x"],vs[n]["y"]
            p = personal_best_positions[n]
            #updating the position
            new_x,new_y = update_pos(x,y,vx,vy)
            ps[n] = {"x":new_x,"y":new_y}

            #updating the velocity
            new_vx,new_vy = update_vel(x,y,vx,vy,p,global_best_position)
            vs[n] = {"x":new_vx,"y":new_vy}
            
            #updating the personal best
            score = criterion(new_x,new_y)
            if score < personal_best_scores[n]:
                personal_best_scores[n] = score
                personal_best_positions[n] = {"x":new_x,"y":new_y}
        
        #updating the global best 
        best_particle = np.argmin(personal_best_scores)
        global_best_position = personal_best_positions[best_particle]
        
    #optimized solution
    print(global_best_position)
    print(min(personal_best_scores))
    
if __name__ == '__main__':
    main()
